{"ast":null,"code":"import _classCallCheck from \"/Users/Adam/Genepull Template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/Adam/Genepull Template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/Adam/Genepull Template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/Adam/Genepull Template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/Adam/Genepull Template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/Adam/Genepull Template/src/pages/profile/Home/index.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { fetchPosts, showDetails } from '../../../actions/postActions';\nimport PropTypes from 'prop-types';\nimport LeftNav from '../../../components/LeftNav/profile';\nimport InfoCard from '../../../components/Infocard';\nimport TreeItem from '../../../components/TreeItem';\nimport PostItem from '../../../components/PostItem/profile';\nimport TargetDetails from '../../../components/TargetDetails/profile';\nimport Pageheader from '../../../components/PageHeader';\nimport CommentFeed from '../../../components/comment/profile';\n\nvar Profile =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Profile, _React$Component);\n\n  function Profile() {\n    var _this;\n\n    _classCallCheck(this, Profile);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Profile).call(this));\n    _this.state = {\n      sideNavToggle: false,\n      commentsMessage: _this.commentsMessage,\n      newComment: ''\n    };\n    return _this;\n  }\n\n  _createClass(Profile, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.props.fetchPosts();\n    } // handleCommentSubmitChange(event) {\n    //     this.setState({newComment: event.target.value});\n    //     }\n    // handleCommentSubmit(event) {\n    //     const {newComment} = this.state;\n    //         alert('A name was submitted: ' + this.state.newComment);\n    //         event.preventDefault();\n    //         this.state.Data.push({\n    //             id: 3,\n    //             avatar: '100008343750912',\n    //             comment: newComment,\n    //         })\n    // }  \n    // DeletePost(posts) {\n    //     console.log(this.state.Data);\n    //     const Post = Object.assign([], this.state.Data);\n    //     Post.splice(posts, 1)\n    //     this.setState({\n    //         Data : Post,\n    //         selectedThumbnail: this.state.Data[0].thumbnail,\n    //         selectedDescription: this.state.Data[0].description,\n    //         selectedComment: 0,\n    //     })\n    // }\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          post = _this$props.post,\n          posts = _this$props.posts;\n      var PostFeed = posts.map(function (item) {\n        return React.createElement(PostItem // commentItem={item.comments[0].text} \n        , {\n          postId: item.id,\n          name: item.name,\n          avatar: item.avatar,\n          thumbnail: item.thumbnail,\n          gallery: item.gallery,\n          displayDetails: function displayDetails() {\n            return _this2.props.showDetails(item);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 73\n          },\n          __self: this\n        });\n      });\n\n      var PostDetails = function PostDetails() {\n        if (!post.name == '') {\n          return React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 86\n            },\n            __self: this\n          }, React.createElement(TargetDetails, {\n            postId: post.id,\n            thumbnail: post.thumbnail,\n            description: post.description,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 87\n            },\n            __self: this\n          }), React.createElement(CommentFeed, {\n            comments: post.comments,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 93\n            },\n            __self: this\n          }));\n        }\n\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 96\n          },\n          __self: this\n        }, \" \", firstPost);\n      };\n\n      var firstPost = posts.slice(0, 1).map(function (item) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 101\n          },\n          __self: this\n        }, React.createElement(TargetDetails, {\n          thumbnail: item.thumbnail,\n          description: item.description,\n          postId: item.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 102\n          },\n          __self: this\n        }), React.createElement(CommentFeed, {\n          postId: item.id,\n          comments: item.comments,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 108\n          },\n          __self: this\n        }));\n      });\n      return React.createElement(\"div\", {\n        className: \"Wrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"Grid_wrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"Grid_2Col\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"Column1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, React.createElement(TreeItem, {\n        img: \"100008343750912\",\n        name: \"Adam Donatelli (ME)\",\n        location: \"St. Petersburg\",\n        bornYear: \"1983\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }), React.createElement(LeftNav, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"Column2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"HeaderWrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }, React.createElement(Pageheader, {\n        text: \"Adam Donatelli\",\n        icon: \"person\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"Grid_2Col_Container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"Column\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"spacebetween\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, React.createElement(\"a\", {\n        title: \"Add a post\",\n        className: \"btn-floating btn-small waves-effect waves-light grey\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        className: \"material-icons\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }, \"add\")))), PostFeed), React.createElement(\"div\", {\n        className: \"Column\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }, PostDetails()))))));\n    }\n  }]);\n\n  return Profile;\n}(React.Component);\n\nProfile.propTypes = {\n  fetchPosts: PropTypes.func.isRequired,\n  posts: PropTypes.array.isRequired,\n  post: PropTypes.object.isRequired,\n  showDetails: PropTypes.func.isRequired\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    posts: state.posts.items,\n    showDetails: state.posts.item,\n    post: state.posts.item //the Key 'posts' and 'post' can be named whatever, but this is what you are naming the prop to be used. 'posts' is used with this.props.posts.\n\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchPosts: fetchPosts,\n  showDetails: showDetails\n})(Profile);","map":{"version":3,"sources":["/Users/Adam/Genepull Template/src/pages/profile/Home/index.js"],"names":["React","connect","fetchPosts","showDetails","PropTypes","LeftNav","InfoCard","TreeItem","PostItem","TargetDetails","Pageheader","CommentFeed","Profile","state","sideNavToggle","commentsMessage","newComment","props","post","posts","PostFeed","map","item","id","name","avatar","thumbnail","gallery","PostDetails","description","comments","firstPost","slice","Component","propTypes","func","isRequired","array","object","mapStateToProps","items"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { fetchPosts, showDetails } from '../../../actions/postActions';\nimport PropTypes from 'prop-types'; \nimport LeftNav from '../../../components/LeftNav/profile';\nimport InfoCard from '../../../components/Infocard';\nimport TreeItem from '../../../components/TreeItem';\n\nimport PostItem from '../../../components/PostItem/profile';\nimport TargetDetails from '../../../components/TargetDetails/profile';\nimport Pageheader from '../../../components/PageHeader'; \nimport CommentFeed from '../../../components/comment/profile';\n\nclass Profile extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            sideNavToggle: false,\n            commentsMessage: this.commentsMessage,\n            newComment: '',\n        }\n\n    }\n\n    componentWillMount() {\n        this.props.fetchPosts();\n\n    }\n\n\n  \n    \n    // handleCommentSubmitChange(event) {\n    //     this.setState({newComment: event.target.value});\n    //     }\n    \n    // handleCommentSubmit(event) {\n    //     const {newComment} = this.state;\n\n    //         alert('A name was submitted: ' + this.state.newComment);\n    //         event.preventDefault();\n\n    //         this.state.Data.push({\n    //             id: 3,\n    //             avatar: '100008343750912',\n    //             comment: newComment,\n    //         })\n    // }  \n\n    \n    // DeletePost(posts) {\n    //     console.log(this.state.Data);\n\n    //     const Post = Object.assign([], this.state.Data);\n    //     Post.splice(posts, 1)\n    //     this.setState({\n    //         Data : Post,\n    //         selectedThumbnail: this.state.Data[0].thumbnail,\n    //         selectedDescription: this.state.Data[0].description,\n    //         selectedComment: 0,\n           \n    //     })\n\n\n    // }\n\n \n    render() {\n        const { post, posts } = this.props;\n\n\n    const PostFeed = posts.map(item => (\n        <PostItem \n        // commentItem={item.comments[0].text} \n        postId={item.id}\n        name={item.name} \n        avatar={item.avatar} \n        thumbnail={item.thumbnail} \n        gallery={item.gallery} \n        displayDetails={() => this.props.showDetails(item)}  />\n    ));\n\n\n                const PostDetails = () => {\n                    if (!post.name == '') {\n                        return  <div> \n                            <TargetDetails\n                            postId={post.id}  \n                            thumbnail={post.thumbnail} \n                            description={post.description}\n\n                            />\n                            <CommentFeed comments={post.comments} />\n                            </div>\n                    }\n                    return <div> {firstPost}</div>\n                    }\n\n\n    const firstPost = posts.slice(0, 1).map(item => (\n        <div>\n                <TargetDetails \n                thumbnail={item.thumbnail} \n                description={item.description}\n                postId={item.id}\n                />\n\n            <CommentFeed postId={item.id} comments={item.comments} />\n            </div>\n    ));\n            \n \n                \n    \n      return (\n        <div className=\"Wrapper\"> \n\n        <div className=\"Grid_wrapper\">\n            <div className=\"Grid_2Col\">\n                <div className=\"Column1\">\n                    <TreeItem img=\"100008343750912\" name=\"Adam Donatelli (ME)\" location=\"St. Petersburg\" bornYear=\"1983\"/>\n                    <LeftNav/>\n                    {/* <InfoCard location='St. Petersburg' age='35' education='University of Arizona' bornIn=\"Hobbs,NM\" /> */}\n                </div>\n\n                <div className=\"Column2\"> \n                        <div className=\"HeaderWrapper\"> \n                            <Pageheader text=\"Adam Donatelli\" icon=\"person\" />\n                        </div>\n\n                        <div className=\"Grid_2Col_Container\"> \n                            <div className=\"Column\">\n                                <div className=\"spacebetween\">\n                                    <div>\n                                    </div>\n                                    <div>\n                                        <a title=\"Add a post\" className=\"btn-floating btn-small waves-effect waves-light grey\">\n                                        <i className=\"material-icons\">add</i>\n                                        </a>\n                                    </div>\n                                </div>\n                                {PostFeed}\n\n                            </div>\n\n                            <div className=\"Column\">\n                               {PostDetails()}\n                            </div>\n                        </div> \n                    </div> \n                </div>\n            </div>\n    </div>\n        );\n    }\n}\n\nProfile.propTypes = {\n    fetchPosts: PropTypes.func.isRequired,\n    posts: PropTypes.array.isRequired,\n    post: PropTypes.object.isRequired, \n    showDetails: PropTypes.func.isRequired \n}\n\nconst mapStateToProps = state => ({\n    posts: state.posts.items,\n    showDetails: state.posts.item,\n    post: state.posts.item,\n    //the Key 'posts' and 'post' can be named whatever, but this is what you are naming the prop to be used. 'posts' is used with this.props.posts.\n})\n\nexport default connect(mapStateToProps, {fetchPosts, showDetails})(Profile)\n"]},"metadata":{},"sourceType":"module"}